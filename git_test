git --version
用文本编辑器打开当前机器上当前用户的配置文件手工进行修改
git config --global --edit
第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录
git config --global user.name "Your Name"
git config --global user.email "email@example.com"


初始化一个Git仓库，到指定文件夹下使用git init命令
git init
添加文件到Git仓库，分两步：
git add git_test
git commit -m "add new file"

进入创建的仓库文件夹中
git status
git diff git_test   查看工作区与暂存区的区别
git add git_test
git status
git diff HEAD -- git_test   命令可以查看工作区和版本库里面最新版本的区别
git commit -m "change file"

git log  可以查看提交历史，以便确定要回退到哪个版本
git reset --hard HEAD^       回退到上一个版本
git reset --hard HEAD^^      回退到上上一个版本
git reset --hard HEAD~100
git reset --hard 3b62ded
git reflog    查看命令历史，以便确定要回到未来的哪个版本

工作区、版本库（暂存区、HEAD指向的master分支）

git checkout -- git_test  可以丢弃工作区的修改,让这个文件回到最近一次git commit或git add时的状态
git reset HEAD git_test  可以把暂存区的修改撤销掉（unstage），重新放回工作区
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，回退到上一版本，不过前提是没有推送到远程库。

git rm git_test  用于删除一个文件

远程仓库

添加到远程库
	在GitHub创建一个仓库   Create New repository

	进入本地的仓库文件夹下
	使用ssh上传
		git remote add origin git@github.com:qiuyongjuan/test.git
	使用http上传
		git remote add origin https://github.com/qiuyongjuan/test.git   把本地仓库与GitHub的远程仓库关联
	git push -u origin master    把本地仓库的内容推送到GitHub仓库    第一次推送master分支时，加上了-u参数
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改

	如果出现fatal: remote origin already exists.表明以前上传过可以先删除远程 Git 仓库 git remote rm origin，再添加远程 Git 仓库
	如果执行 git remote rm origin 报错的话，我们可以手动修改gitconfig文件的内容  vi .git/config 把 [remote “origin”] 那一行删掉就好了

	failed to push some refs to 'git@github.com:qiuyongjuan/test.git'
	Updates were rejected because the remote contains work that you do not have locally
	造成这个错误是因为我在github上修改了自己的文件，在上传本地文件之前没有把github上的文件拉倒本地，意思是本地和远程的文件应该合并后才能上传本地的新文件
	1.git pull origin master   2.git push -u origin master

从远程库克隆
	在GitHub创建一个仓库   Create New repository
	我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件：
git clone https://github.com/QiuYongJuan/git_clone.git
git clone git@github.com:QiuYongJuan/git_clone.git
	Git支持多种协议，默认的git://使用ssh, 包括https，但通过ssh支持的原生git协议速度最快。
	使用https协议除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https

创建和合并分支
git branch		查看分支
git branch <name>		创建分支
git checkout <name>		切换分支
git checkout -b <name>		创建+切换分支
git merge <name>		合并某分支<name>到当前分支
git branch -d <name>		删除分支









